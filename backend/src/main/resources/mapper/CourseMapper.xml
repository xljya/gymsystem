<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    CourseMapper的MyBatis映射文件
    主要用于课程相关的数据库操作，包括实体映射、VO映射及多表联合查询SQL定义
-->
<mapper namespace="com.liucf.gymsystembackend.mapper.CourseMapper">

    <!--
        基础课程实体映射，映射到Course实体类
        用于MyBatis自动将数据库字段与Course实体类属性进行映射
        字段说明：
            - course_id: 课程ID（主键）
            - course_name: 课程名称
            - coach_id: 教练ID（外键，关联coach表）
            - selling_price: 课程单价
            - duration: 课程时长（分钟）
            - create_time: 创建时间
            - update_time: 更新时间
            - is_delete: 是否删除（0-未删除，1-已删除）
            - category_id: 课程分类ID（外键，关联course_category表）
            - difficulty_level: 难度等级
            - description: 课程描述
            - image_url: 课程图片URL
    -->
    <resultMap id="BaseResultMap" type="com.liucf.gymsystembackend.model.entity.Course">
        <id property="courseId" column="course_id" jdbcType="BIGINT"/>
        <result property="courseName" column="course_name" jdbcType="VARCHAR"/>
        <result property="coachId" column="coach_id" jdbcType="BIGINT"/>
        <result property="sellingPrice" column="selling_price" jdbcType="DECIMAL"/>
        <result property="duration" column="duration" jdbcType="INTEGER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="isDelete" column="is_delete" jdbcType="TINYINT"/>
        <result property="categoryId" column="category_id" jdbcType="BIGINT"/>
        <result property="difficultyLevel" column="difficulty_level" jdbcType="VARCHAR"/>
        <result property="description" column="description" jdbcType="VARCHAR"/>
        <result property="imageUrl" column="image_url" jdbcType="VARCHAR"/>
    </resultMap>

    <!--
        课程VO对象映射，映射到CourseVO视图对象
        用于多表联合查询后，将结果映射到CourseVO（包含课程、分类、教练名称等信息）
        字段说明：
            - c_course_id: 课程ID（别名，防止字段冲突）
            - c_course_name: 课程名称
            - c_coach_id: 教练ID
            - c_selling_price: 课程单价
            - c_duration: 课程时长
            - c_create_time: 创建时间
            - c_description: 课程描述
            - c_image_url: 课程图片URL
            - c_difficulty_level: 难度等级
            - cc_category_name: 课程分类名称（来自course_category表）
            - co_coach_name: 教练名称（来自coach表）
    -->
    <resultMap id="CourseVOMap" type="com.liucf.gymsystembackend.model.vo.CourseVO">
        <id property="courseId" column="course_id"/>
        <result property="courseName" column="course_name"/>
        <result property="coachId" column="coach_id"/>
        <result property="sellingPrice" column="selling_price"/>
        <result property="duration" column="duration"/>
        <result property="createTime" column="create_time"/>
        <result property="categoryName" column="category_name"/>
        <result property="description" column="description"/>
        <result property="imageUrl" column="image_url"/>
        <result property="difficultyLevel" column="difficulty_level"/>
        <result property="coachName" column="coach_name"/>
        <collection property="schedule" ofType="com.liucf.gymsystembackend.model.vo.ScheduleVO">
            <result property="day" column="schedule_day"/>
            <result property="time" column="schedule_time"/>
        </collection>
    </resultMap>

    <!--
        基础字段列表，便于SQL复用
        包含Course表的所有主要字段，常用于通用查询
    -->
    <sql id="Base_Column_List">
        course_id,course_name,coach_id,
        selling_price,duration,create_time,
        update_time,is_delete,category_id,
        difficulty_level,description,image_url
    </sql>

    <!--
        课程VO查询的SQL片段，包含多表联查
        说明：
            - 主表：course（课程表，别名c）
            - 左连接course_category（课程分类表，别名cc），获取分类名称
            - 左连接coach（教练表，别名co），获取教练名称
            - 仅查询未被删除的课程（c.is_delete = 0）
        用于VO相关的select语句复用
    -->
    <sql id="CourseVOSelect_Joins">
        SELECT
            c.course_id AS c_course_id,
            c.course_name AS c_course_name,
            c.coach_id AS c_coach_id,
            c.selling_price AS c_selling_price,
            c.duration AS c_duration,
            c.create_time AS c_create_time,
            c.description AS c_description,
            c.image_url AS c_image_url,
            c.difficulty_level AS c_difficulty_level,
            cc.category_name AS cc_category_name,
            co.coach_name AS co_coach_name
        FROM course c
                 LEFT JOIN course_category cc ON c.category_id = cc.category_id
                 LEFT JOIN coach co ON c.coach_id = co.coach_id
        WHERE c.is_delete = 0
    </sql>

    <!--
        查询所有课程VO，按创建时间倒序排列
        返回：
            - List<CourseVO>，每个VO包含课程、分类、教练名称等信息
        说明：
            - 复用CourseVOSelect_Joins SQL片段
            - 按c.create_time降序排列
    -->
    <select id="listAllCoursesForVO" resultMap="CourseVOMap">
        SELECT
            c.*,
            cc.category_name,
            co.coach_name,
            CASE DAYOFWEEK(cs.start_time)
                WHEN 1 THEN '周日'
                WHEN 2 THEN '周一'
                WHEN 3 THEN '周二'
                WHEN 4 THEN '周三'
                WHEN 5 THEN '周四'
                WHEN 6 THEN '周五'
                WHEN 7 THEN '周六'
                END as schedule_day,
            DATE_FORMAT(cs.start_time, '%H:%i') as schedule_time
        FROM course c
                 LEFT JOIN course_category cc ON c.category_id = cc.category_id
                 LEFT JOIN coach co ON c.coach_id = co.coach_id
                 LEFT JOIN course_schedule cs ON c.course_id = cs.course_id AND cs.is_delete = 0
        WHERE c.is_delete = 0
        ORDER BY c.course_id, cs.start_time
    </select>

    <!--
        根据课程ID查询课程VO
        参数：
            - id: 课程ID
        返回：
            - CourseVO对象，包含课程、分类、教练名称等信息
        说明：
            - 复用CourseVOSelect_Joins SQL片段
            - 通过AND c.course_id = #{id}限定查询指定课程
    -->
    <select id="selectCourseVoById" resultMap="CourseVOMap">
        SELECT
            c.*,
            cc.category_name,
            co.coach_name,
            CASE DAYOFWEEK(cs.start_time)
                WHEN 1 THEN '周日'
                WHEN 2 THEN '周一'
                WHEN 3 THEN '周二'
                WHEN 4 THEN '周三'
                WHEN 5 THEN '周四'
                WHEN 6 THEN '周五'
                WHEN 7 THEN '周六'
                END as schedule_day,
            DATE_FORMAT(cs.start_time, '%H:%i') as schedule_time
        FROM course c
                 LEFT JOIN course_category cc ON c.category_id = cc.category_id
                 LEFT JOIN coach co ON c.coach_id = co.coach_id
                 LEFT JOIN course_schedule cs ON c.course_id = cs.course_id AND cs.is_delete = 0
        WHERE c.course_id = #{courseId} AND c.is_delete = 0
        ORDER BY cs.start_time
    </select>

    <!--
        根据分类ID查询课程VO，按创建时间倒序排列
        参数：
            - categoryId: 分类ID
        返回：
            - List<CourseVO>，每个VO包含课程、分类、教练名称等信息
        说明：
            - 复用CourseVOSelect_Joins SQL片段
            - 通过AND c.category_id = #{categoryId}限定分类
            - 按c.create_time降序排列
    -->
    <select id="selectCourseVOsByCategoryId" resultMap="CourseVOMap">
        SELECT
            c.*,
            cc.category_name,
            co.coach_name,
            CASE DAYOFWEEK(cs.start_time)
                WHEN 1 THEN '周日'
                WHEN 2 THEN '周一'
                WHEN 3 THEN '周二'
                WHEN 4 THEN '周三'
                WHEN 5 THEN '周四'
                WHEN 6 THEN '周五'
                WHEN 7 THEN '周六'
                END as schedule_day,
            DATE_FORMAT(cs.start_time, '%H:%i') as schedule_time
        FROM course c
                 LEFT JOIN course_category cc ON c.category_id = cc.category_id
                 LEFT JOIN coach co ON c.coach_id = co.coach_id
                 LEFT JOIN course_schedule cs ON c.course_id = cs.course_id AND cs.is_delete = 0
        WHERE c.category_id = #{categoryId} AND c.is_delete = 0
        ORDER BY c.course_id, cs.start_time
    </select>

    <!-- 新增合并的查询方法 -->
    <select id="listAllCoursesWithSchedule" resultMap="CourseVOMap">
        SELECT 
            c.*,
            cc.category_name,
            co.coach_name,
            CASE DAYOFWEEK(cs.start_time)
                WHEN 1 THEN '周日'
                WHEN 2 THEN '周一'
                WHEN 3 THEN '周二'
                WHEN 4 THEN '周三'
                WHEN 5 THEN '周四'
                WHEN 6 THEN '周五'
                WHEN 7 THEN '周六'
                END as schedule_day,
            DATE_FORMAT(cs.start_time, '%H:%i') as schedule_time
        FROM course c
        LEFT JOIN course_category cc ON c.category_id = cc.category_id
        LEFT JOIN coach co ON c.coach_id = co.coach_id
        LEFT JOIN course_schedule cs ON c.course_id = cs.course_id AND cs.is_delete = 0
        WHERE c.is_delete = 0
        ORDER BY c.course_id, cs.start_time
    </select>

</mapper>
